{
  "extends": [
    // https://github.com/davidgg/tslint-eslint-rules-recommended/blob/master/tslint.js
    "tslint-eslint-rules-recommended",
    // https://github.com/palantir/tslint/blob/master/src/configs/latest.ts
    // /node_modules/tslint/lib/configs/latest.js
    // latest extends recommended
    // https://github.com/palantir/tslint/blob/master/src/configs/recommended.ts
    // /node_modules/tslint/lib/configs/recommended.js
    "tslint:latest",
    // https://github.com/google/ts-style/blob/master/tslint.json
    // /node_modules/gts/tslint.json
    "gts/tslint.json",
    // https://github.com/Microsoft/tslint-microsoft-contrib/blob/master/tslint.json
    // /node_modules/tslint-microsoft-contrib/tslint.json
    "tslint-microsoft-contrib",
    // /node_modules/tslint-config-prettier/lib/index.json
    "tslint-config-prettier"
  ],
  "linterOptions": {
    "exclude": ["dist", "node_modules", "build"]
  },
  "rules": {
    // It looks like the 'ignore-case' option is broken, and this rule is always
    // case-insensitive at the moment
    "export-name": [true, { "ignore-case": false }],
    // default was forcing caplitalized static methods
    "function-name": [
      true,
      {
        "method-regex": "^[a-z][\\w\\d]+$",
        "private-method-regex": "^[a-z][\\w\\d]+$",
        "protected-method-regex": "^[a-z][\\w\\d]+$",
        "static-method-regex": "^[a-z][\\w\\d]+$",
        "function-regex": "^[a-z][\\w\\d]+$"
      }
    ],
    // antiquated pattern - use google style
    "interface-name": [true, "never-prefix"],
    "insecure-random": false,
    "linebreak-style": [true, "LF"],
    // allow 'skipped' tests as well
    "max-func-body-length": [
      true,
      500,
      { "ignore-parameters-to-function-regex": "^(describe|skip)$" }
    ],
    // explicit access
    "member-access": true,
    // causing unnatural class layouts and sometimes incompatible with static
    // initialization - try to order by some natural meaning instead
    "member-ordering": false,
    // enable js libs
    "no-any": false,
    // not using backbone
    "no-backbone-get-set-outside-model": false,
    // here to easily disable during development
    "no-console": false,
    // deprecated
    "no-function-constructor-with-string-args": false,
    // allow packages
    "no-implicit-dependencies": [true, "dev", ["src", "test"]],
    // exception for 'reflect-metadata'
    "no-import-side-effect": [true, { "ignore-module": "reflect-metadata" }],
    // deprecated
    "no-increment-decrement": false,
    // explicit types
    "no-inferrable-types": false,
    // TypeORM requires 'null' when working with 'null' database values
    "no-null-keyword": false,
    // relax by allowing siblings and nested
    "no-relative-imports": [true, "allow-siblings"],
    // deprecated
    "no-reserved-keywords": false,
    // return await
    "no-return-await": false,
    // allow packages
    "no-submodule-imports": false,
    // deprecated
    "no-unnecessary-bind": false,
    // allow related collections of static methods as classes
    "no-unnecessary-class": [true, "allow-static-only"],
    // this is valuable, but really tough to comply with when dealing with untyped third party libraries
    // recommend occassionally setting this to true in any project and attempting to fix most violations
    "no-unsafe-any": false,
    // deprecated, replaced by tsconfig
    "no-unused-variable": false,
    // forces all file names to be hard-coded
    "non-literal-fs-path": false,
    // the leading underscore is ugly but indispensible as it's built into tsc to permit unused method args
    "variable-name": [
      true,
      "ban-keywords",
      "check-format",
      "allow-leading-underscore"
    ]
  },
  // https://palantir.github.io/tslint/rules/
  "rulesDirectory": [
    // https://github.com/Microsoft/tslint-microsoft-contrib#supported-rules
    "node_modules/tslint-microsoft-contrib",
    // https://github.com/buzinas/tslint-eslint-rules#rules-copied-from-the-eslint-website
    "node_modules/tslint-eslint-rules/dist/rules"
  ]
}
